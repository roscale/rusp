fn max (x y) if (> x y) x else y

fn sum (from to) {
    let sum = 0
    let i = from
    while (<= i to) {
        sum = (+ sum i)
        i = (+ i 1)
    }
    sum
}

let is_greater_than = fn (x) fn (y) (> y x)
let is_greater_than_4 = (is_greater_than 4)
//
(println ((is_greater_than 10) 11)) // true
(println (is_greater_than_4 3)) // false

fn recursive_loop (n f) {
    if (> n 0) {
        (f)
        (recursive_loop (- n 1) f)
    }
}

let arg = "yes"
(recursive_loop 3 fn () {
    (print (+ arg " "))
    arg = (+ arg "s")
})
// yes yess yesss

// (max 3 2)

// Possible future list implementation
// (@ [1 [1 2 3] 3] 1) == [1 2 3]
// (+ 1 [2 3]) == [1 2 3]
// (+ [1 2] 3) == [1 2 3]
// (+@ [1 3] 1 2) == [1 2 3]
// (- [1 2 3 4] 4) == [1 2 3]
// (-@ [1 2 3 4] 3) == [1 2 3]

// fn range (from to) {
//     list = []
//     let i = from
//     while (< i to) {
//         list = (+ list i)
//         i = (+ i 1)
//     }
//     sum
// }

// fn map (list f) {
//     let results = []
//     for elem in list {
//         (+ results (f elem))
//     }
//     results
// }

// fn sum (from to) {
//     let sum = 0
//     for i in (range from to) sum = (+ sum i)
//     sum
// }
